import { createSlice } from '@reduxjs/toolkit'

const todosSlice = createSlice({
    // string that is used as the prefix for generated action types
  name: 'todos',
  initialState: [],
  // keys become action type strings, functions are reducers ran when action type is dispatched
  reducers: {
    addTodo(state, action) {
      const { id, text } = action.payload
      /* normally bad to mutate state like so, however createSlice and createReducer wraps 
      function with produce form Immer library, which allows us to "mutate" state inside the reducer*/
      state.push({ id, text, completed: false })
    },
    toggleTodo(state, action) {
      const todo = state.find(todo => todo.id === action.payload)
      if (todo) {
        todo.completed = !todo.completed
      }
    }
  }
})
/**The reducer generated by createSlice will automatically handle all other action 
 types by returning the current state, so we don't have to list that */
export const { addTodo, toggleTodo } = todosSlice.actions

export default todosSlice.reducer

//createSlice returns an object that looks like below

// {
//     name: "todos",
//     reducer: (state, action) => newState,
//     actions: {
//       addTodo: (payload) => ({type: "todos/addTodo", payload}),
//       toggleTodo: (payload) => ({type: "todos/toggleTodo", payload})
//     },
//     caseReducers: {
//       addTodo: (state, action) => newState,
//       toggleTodo: (state, action) => newState,
//     }
//   }